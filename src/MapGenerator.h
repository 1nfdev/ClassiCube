#ifndef CC_MAP_GEN_H
#define CC_MAP_GEN_H
#include "String.h"
#include "ExtMath.h"
#include "Vectors.h"
/* Implements flatgrass map generator, and original classic vanilla map generation (with perlin noise)
   Based on: https://github.com/UnknownShadow200/ClassicalSharp/wiki/Minecraft-Classic-map-generation-algorithm
   Thanks to Jerralish for originally reverse engineering classic's algorithm, then preparing a high level overview of the algorithm.
   Copyright 2014 - 2017 ClassicalSharp | Licensed under BSD-3
*/

volatile float Gen_CurrentProgress;
volatile const char* Gen_CurrentState;
volatile bool Gen_Done;
int Gen_Width, Gen_Height, Gen_Length, Gen_Seed;
bool Gen_Vanilla;
BlockRaw* Gen_Blocks;
#define Gen_SetDimensions(x, y, z) Gen_Width = x; Gen_Height = y; Gen_Length = z;

void FlatgrassGen_Generate(void);
void NotchyGen_Generate(void);

#define NOISE_TABLE_SIZE 512
void ImprovedNoise_Init(UInt8* p, Random* rnd);
float ImprovedNoise_Calc(UInt8* p, float x, float y);

struct OctaveNoise { UInt8 p[8][NOISE_TABLE_SIZE]; int octaves; };
void OctaveNoise_Init(struct OctaveNoise* n, Random* rnd, int octaves);
float OctaveNoise_Calc(struct OctaveNoise* n, float x, float y);

struct CombinedNoise { struct OctaveNoise noise1, noise2; };
void CombinedNoise_Init(struct CombinedNoise* n, Random* rnd, int octaves1, int octaves2);
float CombinedNoise_Calc(struct CombinedNoise* n, float x, float y);


int Tree_Width, Tree_Height, Tree_Length;
BlockRaw* Tree_Blocks;
Random* Tree_Rnd;
/* Appropriate buffer size to hold positions and blocks generated by the tree generator. */
#define TREE_MAX_COUNT 96

bool TreeGen_CanGrow(int treeX, int treeY, int treeZ, int treeHeight);
int  TreeGen_Grow(int treeX, int treeY, int treeZ, int height, Vector3I* coords, BlockRaw* blocks);
#endif
